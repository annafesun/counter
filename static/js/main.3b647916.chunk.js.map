{"version":3,"sources":["components/Display/Display.module.scss","components/Button/Button.module.scss","components/ValueSetter/ValueSetterInput/ValueSetterInput.module.scss","components/ValueSetter/ValueSetter.module.scss","components/Display/Display.js","components/Button/Button.js","components/ValueSetter/ValueSetterInput/ValueSetterInput.js","components/ValueSetter/ValueSetter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","props","className","styles","display","maxClass","value","this","onClick","disabled","React","Component","ValueSetterInput","onChangeValue","e","target","onChange","error","newMinValue","newMaxValue","text","type","ValueSetter","changeMaxValue","changeMinValue","App","state","maxValue","minValue","addValue","setState","saveState","resetValue","onChangeMaxValue","onChangeMinValue","setNewValues","render","Button","restoreState","stateAsString","JSON","stringify","localStorage","setItem","getItem","parse","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3b647916.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2pfbm\",\"max\":\"Display_max__7NmXv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default-btn\":\"Button_default-btn__1t35y\",\"disabled\":\"Button_disabled__3ra9K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value-setter__input\":\"ValueSetterInput_value-setter__input__2LKL0\",\"error\":\"ValueSetterInput_error__2OaTN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value-setter\":\"ValueSetter_value-setter__2fGkR\"};","import React from \"react\";\nimport styles from \"./Display.module.scss\";\n\nconst Display = (props) => {\n    return (\n        <div className={`${styles.display}  ${props.maxClass && styles['max']}`}> {props.value}</div>\n    )\n}\n\nexport default Display","import React from \"react\";\nimport styles from \"./Button.module.scss\";\n\nclass Display extends React.Component {\n    render() {\n        const {value, onClick, disabled} = this.props\n        return (\n            <button className={`${styles['default-btn']} ${disabled && styles['disabled']}`}\n                    onClick={() => (onClick())}\n                    disabled={disabled}>\n                {value}\n            </button>);\n    }\n}\n\n\nexport default Display","import React from \"react\";\nimport styles from \"./ValueSetterInput.module.scss\";\n\n\nclass ValueSetterInput extends React.Component {\n    onChangeValue = (e) => {\n        let value = +e.target.value\n        this.props.onChange(value)\n    }\n\n\n    render() {\n        let error = this.props.newMinValue < 0 || this.props.newMinValue > this.props.newMaxValue;\n        return (\n            <div className={`${styles['value-setter__input']} ${this.props.className && this.props.className} \n           ${error && styles.error}\n           `}>\n                <span>{this.props.text}</span>\n                <input type=\"number\"\n                       onChange={this.onChangeValue}\n                       value={this.props.type === 'max' ? this.props.newMaxValue :\n                           this.props.type === 'min' ? this.props.newMinValue : 0\n                       }\n                />\n            </div>\n        )\n    }\n}\n\nexport default ValueSetterInput","import React from \"react\";\nimport styles from \"./ValueSetter.module.scss\";\nimport ValueSetterInput from \"./ValueSetterInput/ValueSetterInput\";\n\n\nclass ValueSetter extends React.Component {\n\n\n    render() {\n        return (\n            <div className={styles['value-setter']}>\n                <ValueSetterInput text={'max-value:'}\n                                  onChange={this.props.changeMaxValue}\n                                  newMaxValue={this.props.newMaxValue}\n                                  newMinValue={this.props.newMinValue}\n                                  type={'max'}\n                />\n                <ValueSetterInput text={'min-value:'}\n                                  onChange={this.props.changeMinValue}\n                                  newMaxValue={this.props.newMaxValue}\n                                  newMinValue={this.props.newMinValue}\n                                  type={'min'}\n                />\n            </div>\n        )\n    }\n}\n\nexport default ValueSetter","import React from 'react';\nimport './App.scss';\nimport Display from \"./components/Display/Display\";\nimport Button from \"./components/Button/Button\";\nimport ValueSetter from \"./components/ValueSetter/ValueSetter\";\n\n\nclass App extends React.Component {\n    state = {\n        value:   0,\n        maxValue: 5,\n        minValue:  0,\n        newMaxValue: 5,\n        newMinValue:  0\n    }\n    componentDidMount() {\n        this.restoreState()\n    }\n    saveState(){\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('our-state', stateAsString);\n    }\n    restoreState(){\n        let state = {   value:   0, maxValue: 5, minValue:  0, newMaxValue: 5,newMinValue:  0  }\n        let stateAsString = localStorage.getItem('our-state');\n        if(stateAsString != null) {\n            state = JSON.parse(stateAsString)\n        }\n        this.setState({\n            ...state\n        })\n    }\n    addValue = () => {\n        this.setState(\n            {\n                value: this.state.value + 1,\n            },()=> this.saveState()\n        )\n\n    }\n    resetValue = () => {\n        this.setState({value: this.state.minValue,},()=> this.saveState())\n\n    }\n    onChangeMaxValue = (value) => {\n        this.setState({newMaxValue: value},()=> this.saveState())\n\n    }\n    onChangeMinValue = (value) => {\n        this.setState({newMinValue: value},()=> this.saveState())\n    }\n    setNewValues = () =>{\n            this.setState({\n            maxValue: this.state.newMaxValue,\n            minValue: this.state.newMinValue,\n            value:  this.state.newMinValue,\n        },()=> this.saveState())\n\n    }\n    render = () => {\n        let error = this.state.newMinValue < 0 || this.state.newMinValue > this.state.newMaxValue;\n        return (\n            <div className=\"App\">\n                <div>\n                    <ValueSetter value={this.state.value}\n                                 minValue={this.state.minValue}\n                                 maxValue={this.state.maxValue}\n                                 newMaxValue={this.state.newMaxValue}\n                                 newMinValue={this.state.newMinValue}\n                                 changeMinValue={this.onChangeMinValue}\n                                 changeMaxValue={this.onChangeMaxValue}\n                    />\n\n                    <Button disabled={error}\n                            value={'set'}\n                            onClick={this.setNewValues}\n                    />\n                </div>\n                <div>\n                    <Display value={this.state.value}\n                             maxValue={this.state.maxValue}\n                             maxClass={this.state.value === this.state.maxValue}\n                    />\n                    <div className=\"buttons\">\n                        <Button disabled={this.state.value >= this.state.maxValue}\n                                onClick={this.addValue}\n                                value={'inc'}\n                        />\n                        <Button disabled={this.state.value === this.state.minValue}\n                                onClick={this.resetValue}\n                                value={'reset'}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to Display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}